[{"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\index.tsx":"1","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\reportWebVitals.ts":"2","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\App.tsx":"3","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\Todolist.tsx":"4","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\AddItemForm.tsx":"5","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\EditableSpan.tsx":"6","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\AppWithReducers.tsx":"7","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\state\\todolists-reducer.ts":"8","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\state\\tasks-reducer.ts":"9","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\AppWithRedux.tsx":"10","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\state\\store.ts":"11","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\Task.tsx":"12","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\stories\\Button.stories.tsx":"13","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\stories\\Header.stories.tsx":"14","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\stories\\Page.stories.tsx":"15","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\stories\\Page.tsx":"16","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\stories\\Header.tsx":"17","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\stories\\Button.tsx":"18","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\AddItemForm.stories.tsx":"19","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\Task.stories.tsx":"20","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\EditableSpan.stories.tsx":"21"},{"size":410,"mtime":1613485457721,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1609522276619,"results":"24","hashOfConfig":"23"},{"size":5933,"mtime":1612170351599,"results":"25","hashOfConfig":"23"},{"size":3855,"mtime":1614108112723,"results":"26","hashOfConfig":"23"},{"size":1652,"mtime":1614773822011,"results":"27","hashOfConfig":"23"},{"size":923,"mtime":1614802507446,"results":"28","hashOfConfig":"23"},{"size":5425,"mtime":1613480944124,"results":"29","hashOfConfig":"23"},{"size":2574,"mtime":1613547659390,"results":"30","hashOfConfig":"23"},{"size":3580,"mtime":1614109296953,"results":"31","hashOfConfig":"23"},{"size":4659,"mtime":1614080562664,"results":"32","hashOfConfig":"23"},{"size":367,"mtime":1613485117633,"results":"33","hashOfConfig":"23"},{"size":1571,"mtime":1614801016864,"results":"34","hashOfConfig":"23"},{"size":804,"mtime":499162500000,"results":"35","hashOfConfig":"23"},{"size":510,"mtime":499162500000,"results":"36","hashOfConfig":"23"},{"size":605,"mtime":499162500000,"results":"37","hashOfConfig":"23"},{"size":2415,"mtime":499162500000,"results":"38","hashOfConfig":"23"},{"size":1356,"mtime":499162500000,"results":"39","hashOfConfig":"23"},{"size":941,"mtime":499162500000,"results":"40","hashOfConfig":"23"},{"size":730,"mtime":1614801774256,"results":"41","hashOfConfig":"23"},{"size":1179,"mtime":1614801927141,"results":"42","hashOfConfig":"23"},{"size":865,"mtime":1614802873792,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1v8cg9g",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\index.tsx",[],["90","91"],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\reportWebVitals.ts",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\App.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\Todolist.tsx",["92","93","94","95","96"],"import React, {useCallback} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport './App.css';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListsID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todoListsID: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log('Todolist is called')\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"All\", props.id), [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"Active\", props.id), [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"Completed\", props.id), [props.changeFilter, props.id])\r\n\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        props.changeTodoListTitle(props.id, newTitle)\r\n    }, [props.changeTodoListTitle, props.id])\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === \"Completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n    if (props.filter === \"Active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChange={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList} color=\"primary\">\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => <Task\r\n                            key={t.id}\r\n                            task={t}\r\n                            todolistId={props.id}\r\n                            removeTask={props.removeTask}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />\r\n                    )\r\n                }\r\n\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    size={\"small\"}\r\n                    color={props.filter === \"All\" ? \"primary\" : \"default\"}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    size={\"small\"}\r\n                    color={props.filter === \"Active\" ? \"primary\" : \"default\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    size={\"small\"}\r\n                    color={props.filter === \"Completed\" ? \"primary\" : \"default\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\n","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\AddItemForm.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\EditableSpan.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\AppWithReducers.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\state\\todolists-reducer.ts",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\state\\tasks-reducer.ts",["97","98","99","100"],"import {FilterValuesType, TasksStateType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType, todoListID1, todoListID2} from \"./todolists-reducer\";\r\n\r\nexport type removeTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string,\r\n    todoListID: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskID: string\r\n    isDone: boolean\r\n    todoListID: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskID: string\r\n    title: string\r\n    todoListID: string\r\n}\r\n\r\n\r\ntype ActionsType = removeTaskActionType | AddTaskActionType | ChangeTaskStatusActionType | ChangeTaskTitleActionType\r\n                    | AddTodoListActionType | RemoveTodoListActionType\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = state[action.todoListID];\r\n            const filteredTask = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todoListID] = filteredTask\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todoListID];\r\n            const newTask = {id: v1(), title: action.title, isDone: false};\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todoListID] = newTasks;\r\n            return stateCopy\r\n        }\r\n\r\n        case 'CHANGE-TASK-STATUS': {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todoListID];\r\n            stateCopy[action.todoListID] = tasks\r\n                .map(t => t.id === action.taskID ? {...t, isDone: action.isDone} : t)\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todoListID];\r\n            stateCopy[action.todoListID] = tasks\r\n                .map(t => t.id === action.taskID ? {...t, title: action.title} : t)\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todolistID] = [];\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoListID: string): removeTaskActionType => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        taskId,\r\n        todoListID\r\n    }\r\n}\r\nexport const addTaskAC = (title: string, todoListID: string): AddTaskActionType => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        title,\r\n        todoListID\r\n    }\r\n}\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todoListID: string): ChangeTaskStatusActionType => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        taskID,\r\n        isDone,\r\n        todoListID\r\n    }\r\n}\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todoListID: string): ChangeTaskTitleActionType => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITLE',\r\n        taskID,\r\n        title,\r\n        todoListID\r\n    }\r\n}\r\n","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\AppWithRedux.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\state\\store.ts",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\Task.tsx",["101"],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\stories\\Button.stories.tsx",[],["102","103"],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\stories\\Header.stories.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\stories\\Page.stories.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\stories\\Page.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\stories\\Header.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\stories\\Button.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\AddItemForm.stories.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\Task.stories.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\EditableSpan.stories.tsx",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":32,"column":86,"nodeType":"110","endLine":32,"endColumn":116,"suggestions":"111"},{"ruleId":"108","severity":1,"message":"109","line":33,"column":92,"nodeType":"110","endLine":33,"endColumn":122,"suggestions":"112"},{"ruleId":"108","severity":1,"message":"109","line":34,"column":98,"nodeType":"110","endLine":34,"endColumn":128,"suggestions":"113"},{"ruleId":"108","severity":1,"message":"109","line":41,"column":8,"nodeType":"110","endLine":41,"endColumn":45,"suggestions":"114"},{"ruleId":"108","severity":1,"message":"109","line":44,"column":8,"nodeType":"110","endLine":44,"endColumn":33,"suggestions":"115"},{"ruleId":"116","severity":1,"message":"117","line":1,"column":9,"nodeType":"118","messageId":"119","endLine":1,"endColumn":25},{"ruleId":"116","severity":1,"message":"120","line":1,"column":43,"nodeType":"118","messageId":"119","endLine":1,"endColumn":55},{"ruleId":"116","severity":1,"message":"121","line":3,"column":58,"nodeType":"118","messageId":"119","endLine":3,"endColumn":69},{"ruleId":"116","severity":1,"message":"122","line":3,"column":71,"nodeType":"118","messageId":"119","endLine":3,"endColumn":82},{"ruleId":"108","severity":1,"message":"109","line":22,"column":7,"nodeType":"110","endLine":22,"endColumn":63,"suggestions":"123"},{"ruleId":"104","replacedBy":"124"},{"ruleId":"106","replacedBy":"125"},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["128"],["129"],["130"],["131"],["132"],"@typescript-eslint/no-unused-vars","'FilterValuesType' is defined but never used.","Identifier","unusedVar","'TodoListType' is defined but never used.","'todoListID1' is defined but never used.","'todoListID2' is defined but never used.",["133"],["126"],["127"],"no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"134","fix":"136"},{"desc":"134","fix":"137"},{"desc":"134","fix":"138"},{"desc":"134","fix":"139"},{"desc":"134","fix":"140"},"Update the dependencies array to be: [props]",{"range":"141","text":"142"},{"range":"143","text":"142"},{"range":"144","text":"142"},{"range":"145","text":"142"},{"range":"146","text":"142"},{"range":"147","text":"142"},[1191,1221],"[props]",[1315,1345],[1445,1475],[1694,1731],[1835,1860],[1018,1074]]