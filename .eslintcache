[{"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\index.tsx":"1","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\reportWebVitals.ts":"2","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\App.tsx":"3","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\Todolist.tsx":"4","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\AddItemForm.tsx":"5","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\EditableSpan.tsx":"6","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\AppWithReducers.tsx":"7","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\state\\todolists-reducer.ts":"8","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\state\\tasks-reducer.ts":"9","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\AppWithRedux.tsx":"10","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\state\\store.ts":"11"},{"size":410,"mtime":1613485457721,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1609522276619,"results":"14","hashOfConfig":"13"},{"size":5933,"mtime":1612170351599,"results":"15","hashOfConfig":"13"},{"size":4615,"mtime":1614106432013,"results":"16","hashOfConfig":"13"},{"size":1645,"mtime":1614070588088,"results":"17","hashOfConfig":"13"},{"size":868,"mtime":1611145595627,"results":"18","hashOfConfig":"13"},{"size":5425,"mtime":1613480944124,"results":"19","hashOfConfig":"13"},{"size":2574,"mtime":1613547659390,"results":"20","hashOfConfig":"13"},{"size":3718,"mtime":1614080168933,"results":"21","hashOfConfig":"13"},{"size":4659,"mtime":1614080562664,"results":"22","hashOfConfig":"13"},{"size":367,"mtime":1613485117633,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1v8cg9g",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\index.tsx",[],["48","49"],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\reportWebVitals.ts",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\App.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\Todolist.tsx",["50","51","52","53"],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\AddItemForm.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\EditableSpan.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\AppWithReducers.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\state\\todolists-reducer.ts",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\state\\tasks-reducer.ts",["54","55","56","57"],"import {FilterValuesType, TasksStateType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType, todoListID1, todoListID2} from \"./todolists-reducer\";\r\n\r\nexport type removeTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string,\r\n    todoListID: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskID: string\r\n    isDone: boolean\r\n    todoListID: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskID: string\r\n    title: string\r\n    todoListID: string\r\n}\r\n\r\n\r\ntype ActionsType = removeTaskActionType | AddTaskActionType | ChangeTaskStatusActionType | ChangeTaskTitleActionType\r\n                    | AddTodoListActionType | RemoveTodoListActionType\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = state[action.todoListID];\r\n            const filteredTask = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todoListID] = filteredTask\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todoListID];\r\n            const newTask = {id: v1(), title: action.title, isDone: false};\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todoListID] = newTasks;\r\n            return stateCopy\r\n        }\r\n\r\n        case 'CHANGE-TASK-STATUS': {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todoListID];\r\n            let task = tasks.find(t => t.id === action.taskID);\r\n            if (task) {\r\n                task.isDone = action.isDone;\r\n            }\r\n            stateCopy[action.todoListID] = [...tasks]\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todoListID];\r\n            let task = tasks.find(t => t.id === action.taskID);\r\n            if (task) {\r\n                task.title = action.title;\r\n            }\r\n            stateCopy[action.todoListID] = [...tasks]\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todolistID] = [];\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoListID: string): removeTaskActionType => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        taskId,\r\n        todoListID\r\n    }\r\n}\r\nexport const addTaskAC = (title: string, todoListID: string): AddTaskActionType => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        title,\r\n        todoListID\r\n    }\r\n}\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todoListID: string): ChangeTaskStatusActionType => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        taskID,\r\n        isDone,\r\n        todoListID\r\n    }\r\n}\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todoListID: string): ChangeTaskTitleActionType => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITLE',\r\n        taskID,\r\n        title,\r\n        todoListID\r\n    }\r\n}\r\n","C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\AppWithRedux.tsx",[],"C:\\IT-incubator\\Projects\\ToDoList\\my-app\\src\\state\\store.ts",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":31,"column":85,"nodeType":"64","endLine":31,"endColumn":115,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"63","line":32,"column":91,"nodeType":"64","endLine":32,"endColumn":121,"suggestions":"66"},{"ruleId":"62","severity":1,"message":"63","line":33,"column":97,"nodeType":"64","endLine":33,"endColumn":127,"suggestions":"67"},{"ruleId":"62","severity":1,"message":"63","line":43,"column":8,"nodeType":"64","endLine":43,"endColumn":33,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":1,"column":9,"nodeType":"71","messageId":"72","endLine":1,"endColumn":25},{"ruleId":"69","severity":1,"message":"73","line":1,"column":43,"nodeType":"71","messageId":"72","endLine":1,"endColumn":55},{"ruleId":"69","severity":1,"message":"74","line":3,"column":58,"nodeType":"71","messageId":"72","endLine":3,"endColumn":69},{"ruleId":"69","severity":1,"message":"75","line":3,"column":71,"nodeType":"71","messageId":"72","endLine":3,"endColumn":82},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["78"],["79"],["80"],["81"],"@typescript-eslint/no-unused-vars","'FilterValuesType' is defined but never used.","Identifier","unusedVar","'TodoListType' is defined but never used.","'todoListID1' is defined but never used.","'todoListID2' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"82","fix":"84"},{"desc":"82","fix":"85"},{"desc":"82","fix":"86"},"Update the dependencies array to be: [props]",{"range":"87","text":"88"},{"range":"89","text":"88"},{"range":"90","text":"88"},{"range":"91","text":"88"},[1183,1213],"[props]",[1306,1336],[1435,1465],[1773,1798]]